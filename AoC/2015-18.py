#!/usr/bin/env python
# run on pythonanywhere.com at version 3.9.5

r"""
DESCRIPTION
    https://adventofcode.com/2015/day/18

AUTHOR:
    Erik P. Johnson

DISCUSSION
    John Conway's "Game of Life"

    When I was about... hmmm, probably about 14, 15, my family had an
Apple ][+, and we subscribed to some sort of computer magazine. One issue
came with a program listing in BASIC for life. I didn't understand all
the details, but I carefully copied the listing, entered it and debugged
it until I got it run.

    I regret that I did not more carefully study the whole thing, but I
will always think back to how excited I was to get that program working,
even though all I was doing was typing in code somebody else created.

    I did spend many hours watching "Life" evolve on... I beleive it was
40x24 text display. I remember it was an NEC monitor that was green. It
could update probably about 10 to 20 cells a second, so one generation
even on that small grid took several seconds. ;)


STRATEGY
    What's a nice way to implement this? I could, of course, represent
the grid as a list of lists, but I like the idea of dicts keyed by
tuples.
    I am thinking of a neighbors(x, y) function that gives a list of
neighboring cell tuples, computed without regarding to the boundaries,
then another function that can filter out anything that is over the
edge.
    So, for example, using 0-indexed numbers, my grid would be (0,0) in
one of the corners, then it has eight neighbors:

    [ (-1, -1), (-1, 0), (-1, 1),
      (0, -1),           (0, 1),
      (1, -1),  (1, 0),  (1, 1), ]

    If you filter that for R < 0 or C < 0 then you remove the top row
and the left column, which would leave: [(0, 1), (1, 0),  (1, 1)], the
correct neighbors for (0, 0).

If you likewise filter on (R or C) > 99, then you have a general
function that will work on any list of neighbors.

    I would call that, not an "optimized" solution, but a "general
functional solution". Getting the neighbors, then filtering can work the
same on any cell, which simplifies code. I have found recently, in my
Python work for SNL, that having clean, simple code greatly aids both my
own understandability, as well as how easy it is to modify code to
produce new behaviors.

    If I needed to go really fast, I would not apply the filter on any
edge cell (including corners), and I probably wouldn't use additional
functions at all: use nested blocks in loops, but as I am not getting a
score based on performance, I like this "functional" idea.
    
    So, functions to: 
        * generate neighbors
        * filter neighbors
        * iterate over a neighbor list and sum live neighbors
        * apply "this" cell's state based on number of live neighbors

    for gen in range(100):
        for row in range(100):
            for col in range(100):
                compute (row, col)'s state in the next generation

    count up how many cells are ON in the final generation
    done.

If I wanted to do some sort of more sophisticated Life analysis, having
the whole grid represented in a single dict seems nice. If I were
dealing with a very large grid, one could only keep the live cells,
deleting keys from the dict as cells die. On this relatively small grid,
I think it's perhaps easier to just store the state. That would be
another good question for an efficiency study (that I'm not going to do
here).
"""


# import pdb  # http://pymotw.com/2/pdb/


NL = '\n'
N_ROWS = None  # set in initDict()

TEST_DATA = """\
.#.#.#
...##.
#....#
..#...
#.#..#
####..
"""

TEST_DATA2 = """\
##.#.#
...##.
#....#
..#...
#.#..#
####.#
"""

# NB: just manually editing this for Part 2... The orig first & last rows are:
"""
###.##..##.#..#.##...#..#.####..#.##.##.##..###...#....#...###..#..###..###.#.#.#..#.##..#...##.#..#

.#..#.#.#.#...#.##...###.##.#.#...###.##...#.#..###....###.#.###...##..###..#..##.##....###...###.##
"""

DATA = """\
###.##..##.#..#.##...#..#.####..#.##.##.##..###...#....#...###..#..###..###.#.#.#..#.##..#...##.#..#
.#...##.#####..##.......#..####.###.##.#..###.###.....#.#.####.##.###..##...###....#.##.....#.#.#.##
.....#.#.....#..###..####..#.....##.#..###.####.#.######..##......#####.#.##.#########.###..#.##.#.#
...###......#.#..###..#.#.....#.##..#.##..###...#.##.#..#..#.##.#..##......##.##.##.######...#....##
.###.....#...#.#...####.#.###..#..####.#..#.##..####...##.#...#..###...###...####..##....####.##..#.
..#....#...#.......#..###.###....#.##..#.....###.#.##.#....#.#....##.##..#.##.#..###.###.##.##..##.#
##..#####.#.#....#.#...#.#.####..#....#..#....#.#..#.#####...#..##.#.....#.##..##.####......#.#.##..
.#..##..#.#.###..##..##...#....##...#..#.#..##.##..###.####.....#.####.#.....##.#.##...#..####..#...
#.#####.......#####...#...####.#.#.#....#.###.#.##.#####..#.###.#..##.##.#.##....#.##..#....####.#.#
#.##...#####....##.#.#.....##......##.##...#.##.##...##...###.###.##.#.####.####.##..#.##.#.#.####..
#.##.##....###.###.#..#..##.##.#..#.#..##..#.#...#.##........###..#...##.#.#.##.......##.....#...###
###..#.#..##.##.#.#.#...#..#...##.##.#.########.......#.#...#....########..#.#.###..#.#..#.##..#####
####.#.#...#.##.##..#.#...#....#..###..#.#.#.####.#.##.##.#..##..##..#..#####.####.##..########..##.
.#.#...#..##.#..#..###.#..####.......##.#.#.#.##.#####..#..##...#.##...#..#....#..#..###..####.#....
..#.#...#....##...#####..#..#...###.###.....#.###.#....#.#..##...#.##.##.####.#.#.#..#.##.#....#.#..
#....###.####.##..#.#.###..###.##.##..#.#...###..#.##.#####.##.#######..#.#...##.#..........####.###
#.#####.#......#.#......#.....##...##.#.#########.#......##..##..##.#..##.##..#....##...###...#.#...
#..#..##..###.#.#.#.#.....###.#.####.##.##....#.#..##....#.#..#.####..###.##...#######.#####.##.#.#.
..###.#........##.#...###..#.##..#.#....##.#......#..#.##..#.#..#.#..#.####.#####..###.##..#.##.#...
##.###....#..##...#..#.#......##..#...#..#.####..#.##...##.####.#...#..###...#.#.#....###.##..#.#...
..##.##.#.##..##.#..#.###...##..##..#....##..##...####.#..####.###...#.....#..#.##..##..###..#.#...#
#.#....#.....#...##.#...####..#..##..##.####..##..##...####...#....##.#.#######..##.#......######.#.
#.#...###.######.######..##..##....#.#......#......#.#.##.#.##.#.#.#...#...#....#.#.#.#..#.##..#...#
####.###.#.#.##..#.##.#...#.##...#.##.##...#.....#.#..#.####.##..######.#..#.#..##....#.#.#..#.#.#.#
..##......#.#...#.##.##..##..##..#..##..#########.#..###..###.##...#..##.#..#.#.#.######..#....#.#..
..##.##.#...###.#...##..######.##.#..####..#..#.#.##.####.##.##.#...##....#...###.##.####..#....#.#.
####...###..#.#.##.#.#....###..##.#.#..########..#...#.#...#.##....##.##...#.....#.#.....#.....#....
.#.###############....#.##..###..#.####.#.##.##..#..#.#...###...##..##.##.#.....##...###.###.....#..
.###..#..##.##..####.#.###.##.##..#..##....#.#......#......##.#...#.#...#..##.#.#...#...#.##..#.##..
###.#.#.########.#.#..####.#..##.#.##.##.###.##..######...#..##.##.#..#.#...#.##..#####.....#.#.#..#
.##.##..#.#...#####.#.#.###...##...####...#......#...#..####..#.##..........#..#.#..###....######.##
..#####...#.#.#.#..#.##..#...#.#..#.##...##..##.##.#.##.#..#.#...#.......##.#...###.....#...#.#.#.##
##.##.#..######.##...#.....#.###.#..##.#.#.#..####.#....##.#....####...##....#.#.##.#..###.##.##..##
.###.##.#..#.###.####..#.##..####.#.#.##..###.#######.###.###...####........##....###.#...#.#.####.#
........#..#.#..##..########..........#.##.#..##.#...#.....####....##..#..#.#####.###...#...#.##.###
.....#..##.####...##.#####..######.##.#.###.####.##.##.#..##.##.######.##......#..#.####..##....#.##
##...####....#.##.##.###....#.#...#.####..##.#.##.#.#...####.#.#.#.#...##.###...##...###...######.##
.#....#.#.####...#.##.....##...###.#.#.##...##.#####....#.######.#.#....##..##...##....##.#.##.#.#.#
.###..###.#.......#.#######..#.#.#.######....#.#####.#.....#.#########...#....##...##.####.#..#.....
##.#..##..##.....#..##...#..##.##.#..#.#####.##.##.#.##.##...##.######.####..#.##..#####.##...##..#.
#.###...##.#.#.#.##....#.#.##.##..#....#...#.#.........#..#..####..####.####..#.##.##.#....####..##.
.#..######..#####.####.##.#.....#.#.#####..##..###.#.#.#..#.#...#.#######..##....##.##...#######..#.
#...#....#.#.##..#####..#########..#.....#...##.#.#.###...#####..##...##...####.......#######.#..###
.#......#...##.###..#....#...#.#.....#.#...##.#.#..#..###.##.###.#.##..##...#.##......#.###..#.#..##
.#....####...###..#.....##..#...#.#.###.#.#.##...#.##.##.#.#.#..####..###.#.#.#.##.#.#...#..#...####
......##.##.#...#####.##..#.###..#.#####..##.#..##.###......#...#...#..#......###.######...#.#.##..#
###..#...#.##..###.#....##...#..#####.#.#..#.###...#####.#....##..####.#.##...#.#...##..#.#.#.#..#.#
...##.#.##.##..#.#.#.###.#.#...#.....###.###.##...#.###.##...##..#..###.#..##.##..###.#....###..##..
.##.#..###..###.##.##...#..#####...#.....#####.##..####...#.##.#.#..##.#.#.#....###.....#....##.....
######.#..#.#..#....#.###...####.####.#.........#..##.#..##..##.....#..#.##.##...#...#####.#.##..#.#
.##.###...####....#.####...#####..#..#...#..#.....###.#..#.###..#.###.#.......##.####..#.##.#...##..
........#.#.##.#.....#####.###......##..#.##.#..#...####.#...#..###.#.#...##..#.#...#.####...#.#.###
.#..#.##..##...######.###.##.#.#...#.#.#.#.##..##..##.#.##..#....#.##...#.##.##...##....##.###.##.#.
##...#...#...###.#.#...#...#..###......##.#.#....##..##.#..##.#.######...#..##.#.##.#.#....#.##.##..
...#..###.#....#...#.##..##.#.##.#..###.##..#.##..####.#########....#.....##.#.##.##..##.##.######.#
#.##.#..##.......###...#.###....###.#..####..##.#####.##.###....##....#.###...####..#.#.#.##.....###
.......#...#...##.#...##.#.#..#.##..##.#....###...##.#####...#.........#.......###.##.#.#.###....##.
###.#.##.##.....#.#..#.#..####.####..#..###..........####.#.##...#######.###..#####..#.....#..###..#
#...##.##..####.##.###.#.#######..###.#..#######..#.##.####...#..#.##.####..####.#.#.......####.#...
...#.##..#..#..##........#.#..#..#.#....#.###.#.###..#.......###..#.....#....#..##.#...#.###...##.#.
###.##..#.##.#.#####..#.##.####....#####..###.#.#..#...#...###.#.##..#.#.#.....#.####.#.#.#.#.#.#...
..##..##..#..##.##.#...#..#....####....#...#..####..#.....######.###.####.#....##....##.#.#.###....#
.#.#.#.##..####..#.....#.####.#....#.....#....#.##..#.#..#.#...#.#.#.#..#..#..##.#....####.......#..
..##.##..###......#...#..##...#.###.####.#...#.####..#.#.#.....#.#...####...#.########.##.#.#.#..###
#....#.##.....##.###.##.###..#.####.....####.##...#..##.###...###..###.#....####.#..#..#..#.#..##.#.
.#.#.##....#.##......#.#..###.#....###....#......#.#.##.##.#########..##..#...#.####..#...####..#..#
.#.#.......##.#.##.#...#...#.##.#..#.#.#.##....#..###.###.##.#.#...##.#..#..##....#..###.#...#.#.##.
#.##.#....####...#..##..#.#.#.#.##.#...#####.#...#..#..#.####.####.#.#....#......##..##..###...#..##
..##.###..##.####..#..#..##...###.#.#.#######.####...####......##.##..#...#.##...##....#..#..#.....#
....#..#..#.#.####.#...##..#....####.#..####...#.#...###...#..#..##...#....##...#.....#.#..#.#.#...#
...#.#.#.##..##.###..#.######....####.###...##...###.#...##.####..#.#..#.#..#.##.....#.#.#..##......
.#.##.##.....##.#..###.###.##....#...###.#......#...##.###.#.##.##...###...###...#.######..#......#.
###..#...#......#..##...#....##.#..###.##.####..##..##....####.#...#.#....##..#.#######..#.#.#####..
##...#####..####..##....#.#.###.##.#..#.#..#.....###...###.#####.....#..##.#......#...#.###.##.##...
...#.#.#..#.###..#.#.#....##.#.#..####.##.#.####.#.#.#...#....##....#.##.####..###.#.#...##.#..#..##
#.#.#..#.##..##.##.#...##.#....#...###..##..#.#######.#.###..##......##.#..###.########.#.##..#.#.##
######.###....##..#..#...####....#.#.#..#...#..######.#.#.##..##....##....##.##.##...#..#.####.#.#..
#####.###..#..###......##...##.####.#.#.#.###.......##..##.####..##.####.#..#..####..#.####.#####...
##.#.#.###..##.#.##.#.#.#.##.#...##........###.#.##..####....###.#.####.####.#.......##.##.##...##..
#.#..###...#..##.....##.#..#.#..##..######.#####...###.#.......###...#..##..#..#..##.#.#....#..#..#.
#.#..####.###..#...#...#...#.###..#.#.#.#.#.#.#..#....#.##.##.##..###..####.#..##..##.###.###....##.
#..#.##.#####........#..#.##.#..##.#...#....#..#.##..###..##..##.##..#..##.#.#...#.#.##.#.##....#.#.
.......##..#.....#..#.#.....#.##...####.###..####..#.#.#.#..#.....#....##...#..#.##..###.#.#....#...
#...###########.##.....##...###.#.##.##..####.##...#.####.#####.#####.####...###.##...##..#.#.###..#
....#.#.###.####.###...#...#.#..###.#.#.##...#..#.#.#..#.####..#..###.######.#.####.###...###.#.##.#
.....#..#..########...#.#.#.#.#.#.#.#..###.##..####...##.#.#.#...##..#####.##.#...#.####.#######.##.
.......#...#.#..#..#...#..#..##.....#.##....##.##...##..##.##...##...#.#..#.##.#.###.#.####.#.#..##.
.####...#...#.#.#....##..........##.##.###.##.#.#..#.#.#......########.#...#.####.##.###..##...####.
#.#.#...##.###..##..#..#.....####.#.....##.##.#..#.#.###.#..#######...##..#.#..#.#..############.###
.##..####.#..#.....###..#..#.#.....#.#.#...##.##.#....#..#..###.#...#....#.#...####..#.....###.####.
..#...#.###.###....##.#..#.##..####.##.#.##.##.##...###.####..#.#.#.##.#.#.#..###..##.##.##.##.#..##
#...............##.....######.#.#####.##.#....#.#..#.##...#.##....#........##.##...#.##.##.#..#.##.#
#..##..#.#.#.##.#..#.#.##.##...#...#..#.#.##..#.#...###...##...###..#####.#.#..#..#.#..#.#.##...##.#
.#######.#.....##...#.#.####.######.#..#......#....##.#.#..#..###.#...###...#....#.#..#.##.#...#.#..
#.###......##.#.##..#.###.###..####..##....#..###......##..##..#####.####....#...###.....###.#..#...
###...#....###.#..#.###.##...###.##.......##.##.#.#.#....####....###..##.###...#..##....#.#.##..##..
.##.......##.######.#.#..#..##....#####.###.#.##.....####....#......####....#.##.#.##..#.##...##.#.#
.#.###...#.#.#.##.###..###...##..#.##.##..##..#.....###.#..#.##.##.####........##.#####.#.#....#...#
##...##..#.##.#######.###.#.##.#####....##.....##.#.....#.#.##.#....#.##.#....##.#..#.###..#..#.#...
##..#.#.#.#...#.##...###.##.#.#...###.##...#.#..###....###.#.###...##..###..#..##.##....###...###.##
"""


def initDict(data):
    cells_d = {}
    # assuming the board is square (will probably change in Part 2?)
    lines = data.split(NL)[:-1]

    global N_ROWS
    N_ROWS = len(lines)

    for r, line in enumerate(lines):
        for c, char in enumerate(list(line)):
            cells_d[(r, c)] = (char == '#')

    return cells_d
    

def neighbors(r, c):
    # I also like this because the code looks pretty much like what is
    # conceptually happening.
    return [
        (r-1, c-1), (r-1, c), (r-1, c+1),
        (r, c-1),             (r, c+1),
        (r+1, c-1), (r+1, c), (r+1, c+1),
    ]


def nCount(neighbors_l, cells_d):
    """how many live neighbors in neighbors_l?"""

    return sum([1 for r,c in neighbors_l if cells_d[r,c]])


def edges(neighbors_l):
    """Given a list of (R,C) tuples, filter out any not on the board."""

    def onBoard(row, col):
        return (0 <= row < N_ROWS) and (0 <= col < N_ROWS)

    return [(r, c) for r, c in neighbors_l if onBoard(r, c)]


def nextGen(cells_d):
    """compute the next state dict from current state dict"""
    
    newCells_d = {}

    for r in range(N_ROWS):
        for c in range(N_ROWS):
            newCells_d[r, c] = nextCellState(r, c, cells_d)

    return newCells_d


def nextCellState(r, c, cells_d):
    """compute cell(r,c) in next gen given current board"""

    part2 = True
    n = N_ROWS - 1
    corners = [(0, 0), (0, n), (n, 0), (n, n)]
    if part2:
        if (r, c) in corners:
            return True

    n = nCount(edges(neighbors(r, c)), cells_d)
    if cells_d[r, c]:
        # RULE 1: live cell stays live w/ 2 or 3 neighbors, else dead
        return n in [2, 3]
    else:
        # RULE 2: dead cell becomes live w/ exactly 3 neighbors, else dead
        return n == 3


def charRep(val_tf):
    return '#' if val_tf else '.'


def dumpBoard(cells_d, gen):
    print(f"After {gen} step:")
    for r in range(N_ROWS):
        line = ''.join([charRep(cells_d[r, c]) for c in range(N_ROWS)])
        print(line)
    print()


def main():
    """entry point"""

    # load the inital grid state into a dict
    data = DATA
    #data = TEST_DATA2
    cells_d = initDict(data)

    # dump a section to make sure we've got data loading correctly
    # upper-left and lower-right corners match input data grid
    # (ej: wow - that worked first try. Amazing.)
    # for r in range(94, 100):
    #     line = ''.join([charRep(cells_d[r,c]) for c in range(94, 100)])
    #     print(line)

    # other manual testing:
    # ns = neighbors(0,0)
    # print(ns)
    # print(edges(ns))

    for gen in range(100):
        cells_d = nextGen(cells_d)
        # dumpBoard(cells_d, gen + 1)

    total = sum([1 for r, c in cells_d if cells_d[r, c]])
    print(total)


if __name__ == '__main__':
    main()

# EOF
