#!/usr/bin/env python
# run on pythonanywhere.com at version 3.9.5

"""
DESCRIPTION
    Advent of Code 2015, Day 25
    https://adventofcode.com/2015/day/25


--- Day 25: Let It Snow ---
Merry Christmas! Santa is booting up his weather machine; looks like you
might get a white Christmas after all.

The weather machine beeps! On the console of the machine is a copy
protection message asking you to enter a code from the instruction
manual. Apparently, it refuses to run unless you give it that code. No
problem; you'll just look up the code in the--

"Ho ho ho", Santa ponders aloud. "I can't seem to find the manual."

You look up the support number for the manufacturer and give them a
call. Good thing, too - that 49th star wasn't going to earn itself.

"Oh, that machine is quite old!", they tell you. "That model went out of
support six minutes ago, and we just finished shredding all of the
manuals. I bet we can find you the code generation algorithm, though."

After putting you on hold for twenty minutes (your call is very
important to them, it reminded you repeatedly), they finally find an
engineer that remembers how the code system works.

The codes are printed on an infinite sheet of paper, starting in the
top-left corner. The codes are filled in by diagonals: starting with the
first row with an empty first box, the codes are filled in diagonally up
and to the right. This process repeats until the infinite paper is
covered. So, the first few codes are filled in in this order:

   | 1   2   3   4   5   6
---+---+---+---+---+---+---+
 1 |  1   3   6  10  15  21
 2 |  2   5   9  14  20
 3 |  4   8  13  19
 4 |  7  12  18
 5 | 11  17
 6 | 16

For example, the 12th code would be written to row 4, column 2; the 15th
code would be written to row 1, column 5.

The voice on the other end of the phone continues with how the codes are
actually generated. The first code is 20151125. After that, each code is
generated by taking the previous one, multiplying it by 252533, and then
keeping the remainder from dividing that value by 33554393.

So, to find the second code (which ends up in row 2, column 1), start
with the previous value, 20151125. Multiply it by 252533 to get
5088824049625. Then, divide that by 33554393, which leaves a remainder
of 31916031. That remainder is the second code.

"Oh!", says the voice. "It looks like we missed a scrap from one of the
manuals. Let me read it to you." You write down his numbers:

   |    1         2         3         4         5         6
---+---------+---------+---------+---------+---------+---------+
 1 | 20151125  18749137  17289845  30943339  10071777  33511524
 2 | 31916031  21629792  16929656   7726640  15514188   4041754
 3 | 16080970   8057251   1601130   7981243  11661866  16474243
 4 | 24592653  32451966  21345942   9380097  10600672  31527494
 5 |    77061  17552253  28094349   6899651   9250759  31663883
 6 | 33071741   6796745  25397450  24659492   1534922  27995004

"Now remember", the voice continues, "that's not even all of the first
few numbers; for example, you're missing the one at 7,1 that would come
before 6,2. But, it should be enough to let your-- oh, it's time for
lunch! Bye!" The call disconnects.

Santa looks nervous. Your puzzle input contains the message on the
machine's console. What code do you give the machine?

DISCUSSION
    The 1st number is given. This problem will fall before me if I keep
my terminology straight. What I really mean, is keep the API
semantically straight.
    I want a function that gives the nth code:
        code(1) -> 20151125
        code(2) -> 31916031

    So, the way I think this should be looked at is with respect to
column 1. At (Row, Col) = 1, 1 we essentially have zero numbers "above"
this, we are doing zero iterations on the starting number to get the 1st
code. At 2,1, we have 1 number above. We have to do 1 iteration of the
starting code to get to the second code.

    At 3,1 we have 3 numbers above us:

   | 1   2   3  
---+---+---+---+
 1 | 1   3
 2 | 2
 3 | 4

    At 4,1, we have 6 numbers above us:

   | 1   2   3  
---+---+---+---+
 1 | 1   3   6
 2 | 2   5
 3 | 4
 4 | 7

    That is, 6 iterations of the starting number give us the value for
4, 1 (the 7th code).. Notice that these are "triangular" numbers for
(row - 1).

Let T() be the triangular number function:

    T(1) =  1
    T(2) =  3 = 2 + 1
    T(3) =  6 = 3 + 2 + 1
    T(4) = 10 = 4 + 3 + 2 + 1
    T(5) = 15 = 5 + 4 + 3 + 2 + 1
    ...

    More generally, these numbers are given by the formula:
        T(n) = (n * (n + 1)) / 2

Santa's program, in my case, says:
    To continue, please consult the code grid in the manual.
    Enter the code at row 2947, column 3029.

I just need to figure out what argument to call code() with.

Let's do a simple example for: R, C = 4, 5
I basically want to know the index number at 4, 5:

   | 1   2   3   4   5
---+---+---+---+---+---+
 1 | 1   3   6
 2 | 2   5
 3 | 4
 4 | 7               ?

First, there is some triangular number iterations above (R, 1).
Which Row would I use to calculate the triangular number? I think of
this as counting to the lower left one step at a time. From 4,5 we would
reduce column by 1 and increase the row by 1 to get to 5,4. Another step
would get us to 6,3 then 7, 2, then 8,1.

There are T(7) numbers "above" 8,1 = 7 * 8 / 2 = 7 * 4 = 28
One more number to get the index right at 8,1.
After getting to R, 1, I need an additional (C - 1) steps to get onto
column C. Not taking the first 1, you get T(R2) + C (where R2 is whatever
row diagonally left from original R, C to get on column 1.
i.e., R2 = R + (C - 1)  (the place where we have T(N) numbers "above")

To get from a triangular number above, over to column C, you need C more
numbers on top of T(R2).

This can be simplified as n, the index at R,C
(i.e., the value to call code(n) with):
    n = T(R + (C - 1) - 1) + C
      = T(R + C - 2) + C
      = T(9 - 2) + 4
      = T(7) + 4
      = (7 * 8 // 2) + 4
      = 7 * 4 + 4
      = 28 + 4
      = 32

Check:
    Implement code(n) to iterate the starting number n - 1 times, and
    then we should be able to rebuild the first N terms of the table
    given in the description.

    In particular, code(32) should be: 6899651 (as given on row 5, col 4)
    
    Indeed, my implementation gives that:
        code(32) ->  6899651 

    So, what is N for R, C = 2947, 3029 ?
    n = T(R + (C - 1) - 1) + C
    n = 17850354
"""


import sys
import json
# import pdb  # http://pymotw.com/2/pdb/

# GLOBAL DATA (givens from problem statement)
START = 20151125  # starting value at R,C = 1,1
MULT = 252533     # multiplier
MOD = 33554393    # modulus value


def code(n):
    """compute the n-th code, where code(1) = 20151125"""
    val = START
    if n == 1:
        return val

    # else:
    for i in range(n - 1):
        val *= MULT
        val %= MOD

    return val


def rc2n(r, c):
    """compute index at: (R, C)"""
    # n = T(R + (C - 1) - 1) + C
    i = r + c - 2
    t_i = i * (i + 1) // 2  # the T(i) value

    return t_i + c  # index @ R,C


def main():

    # test: just dump the first few terms, inspect against given table
    for i in range(1, 15):
        print(f"{i}: {code(i)}")
    print()

    # test the value for: 5, 4 (my own, arbitrary example)
    R, C = 5, 4
    n = rc2n(R, C)
    print(f"rc2n({R}, {C}) is: {n}")
    print(f"code({n}) is: {code(n)}")
    print()

    # value at Santa's row, col
    R, C = 2947, 3029
    n = rc2n(R, C)
    print(f"rc2n({R}, {C}) is: {n}")
    print(f"code({n}) is: {code(n)}") # 19980801 verified correct @ 2022Jul31


if __name__ == '__main__':
    main()

# EOF

