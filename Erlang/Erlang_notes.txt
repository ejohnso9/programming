
                                ==============
                                === Erlang ===
                                ==============

DESCRIPTION
    General links to Erlang stuff and notes about the language (and
    environment)

DOC POLICY
    top-post after "General Erlang Environment Orientation"


Book References
----------------
LYSE: "Learn You Some Erlang for Great Good!", Fred Hebert, No Starch Press
    https://learnyousomeerlang.com/

IErl(IE): "Introducing Erlang", Simon St.Laurent, O'Reilly

PE(SCM): "Programming Erlang - Software for a Concurrent World",
    Joe Armstrong (one of the orig lang creators)

See "Etudes for Erlang" at front of IErl
    http://github.com/oreillymedia/etudes-for-erlang 
        NB: link no longer good - sent email to suuport@oreilly.com




PROJECTS
---------
[ ] General benchmarking of Erlang vs. Python performance

[ ] Research available modules in Erlang for:
    * WebSocket
    * XML parsing



General Erlang Environment Orientation
---------------------------------------


On Windows, the Erlang shell is not on the path.
You can run it from the Windows menu easliy enough:
    1) Hit the windows key
    2) Type 'Erlang'
    3) Hit return and "C:\Program Files\erl-24.3\bin\werl.exe" should
        execute (displaying a stand-alone window w/ shell)

'%' is the Erlang ocmment character
    comments are single-line
    By convention, 1, 2, or 3 '%' give level of comment:
        1 for indented w/ code statements
        2 is like section
        3 flush left (kinda like H1)


The shell does have a basic understanding of the file system, and
supports some basic Unix-like commands issued as functions calls from
within the shell:

    1> ls().
    include lib

    2> pwd().
    c:/Program Files/erl-24.3/usr

    3> q().  %% to quit

    %% others
    b().  % show bound vars
    c(module_name).  % compile a module file
    f(N). % clear variable 'N'
    f().  % clear *all* the shell vars
    h().  % history
    (N).  % refer to value #N (by line number)



%% ^G to drop into "User switch command":

User switch command
 --> h
  c [nn]            - connect to job
  i [nn]            - interrupt job
  k [nn]            - kill job
  j                 - list all jobs
  s [shell]         - start local shell
  r [node [shell]]  - start remote shell
  q                 - quit erlang
  ? | h             - this message


The shell is also a basic REPL:

> help().
%% list truncated, but a few of the more "interesting" lines:
** shell internal commands **
b()             -- display all variable bindings
c(ModuleName).  -- compile the ModuleName.erl file
e(N)            -- repeat the expression in query <N>
f()             -- forget all variable bindings
f(X)            -- forget the binding of variable X
h()             -- history
h(Mod)          -- help about module
h(Mod,Func)     -- help about function in module
h(Mod,Func,Arity) -- help about function with arity in module
l(Module)       -- load (or reload) Module.erl module
v(N)            -- use the value of query <N>


2022Sep24, Saturday
--------------------
IE pg 35:
    %% This is an example of taking a tuple as arg (arity=1, public),
    %% unpacking that locally in two statements (separated w/ ',' !!!),
    %% then calling an arity=2 (private) function.
    fall_velocity(Where) ->
        {Planemo, Distance} = Where,
        fall_velocity(Planemo, Distance).
    %% This is really more like the C concept of alternation in an
    %% expression than separate "lines", per se.


Some General Examples
=====================

> math:pi().
3.141592653589793

% help, for example:
10> h(math,tan).

  -spec tan(X) -> float() when X :: number().

Since:
  OTP 18.0,OTP 20.0

  A collection of mathematical functions that return floats. Arguments are
  numbers.

11> math:tan(math:pi() / 2.0).
1.633123935319537e16

%% ej: HUH?!? Granted, v(11) is a rather large number, but shouldn't
%% that be something like largest representable float?
%% Or at least something approaching largest representable 64-bit
%% IEEE 754? There is a lot room left betweeen 1.633..e16
%% and advertised representable range of exponents up to 308?!?

# Curiously, this is *EXACTLY* what Python gives, too:
>>> math.tan(math.pi / 2.0)
1.633123935319537e+16

%% IE-5, integer results:
13> round(1.9).
2
14> trunc(1.9).
1

%% IE-7, integer constants (up to base 36)
> 2#1111
15
29> 16#badc0ffee.
50159747054
30> 18#gaffe.
1743080

%% IE-8,9
Concept of immutable variables by default. You can make an assignment to
an unbound variable to begin with, but thereafter, expressions such as
'n = n + 1' are always going to be false (and will throw errors).

%% EOF

