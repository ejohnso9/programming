
                                ==============
                                === Erlang ===
                                ==============

Book References
----------------
LYSE: "Learn You Some Erlang for Great Good!", Fred Hebert, No Starch Press
IErl (or just IE): "Introducing Erlang", Simon St.Laurent, O'Reilly

See "Etudes for Erlang" at front of IErl
    http://github.com/oreillymedia/etudes-for-erlang


Sunday, March 20, 2022
========================

I would have sworn I had some Erlang notes on this computer from before?
Can't find them.  Keeping this all as part of a Git repo that you can
synch on any computer makes a lot of sense. Let's do that.


%% IDEA %%
We have this RESULTS_XML file...
Erlang has this NOSQL built-in DB...
I already have Python code in place to use xml.dom.minidom to parse
that file and combine Incidents.
Erlang basically gives this built-in parallelism for free.
Could Erlang take a path to a file on a web server and parse the file
and generate JSON for combine objects substantially faster than Python
can do that processing?
It would be curious to see how much faster.
Maybe build Python API which uses WebSocket to offload processing tasks
to an Erlang system?
If Erlang were substantially faster (at least 2X), the might save a lot
time, and pave the way for generalized parallel programming via
Erlang/Elixir for Simajin.

Don't talk about it. Explore it. Prove it. Then, if proven to be
substantially faster, quietly change existing Python code to talk to
running Erlang services. 

*** Better yet, dynamically figure out if there is some Erlang server
that could be used, and use that if available, else just do the straight
Python solution!


%% IDEA (Python) %%
There are now at least 2 Python scripts grinding through RESULTS_XML
files. Putting these into JSON form in a data file is likely to be much,
much faster to pick up and parse than going through XML
parsing/processing twice.

Even faster would be a Flask or other Python server that has collections
of Python objects cached in memory that can be dished out via some sort
of streaming protocol (e.g.,, HTTP(S) or TCP/IP socket)

signals to cache server as Simajin is finishing writing RESULS_XML
files?

[ ] Try to document a simple map of script usage of XML file data and
    how you might build a cacheing server to speed all this up.

[ ] Start doing Python networking books.

Proof of Concept steps:
    [ ] Client / server between Python and Erlang
        * WebSocket?
        * HTTP?
        * TCP/IP Socket?
    [ ] Research available modules in Erlang for:
        * WebSocket
        * XML parsing

    [ ] General benchmarking of Erlang vs. Python performance


[ ] What is the relative performance of picking up a .json file of
    combined objects versus parsing raw XML?
    If we've done decent progrmaming to start with, chaning Luke's
    script to use a different sort of API call should be fairly clean,
    simple, painless.

[ ] You were using something before to generate some sort of output
    data... was Python benchmarking? Code coverage?
    Q: What are the standard libraries for Python code benchmarking?
    A:

    Q: Where *are* we spending a lot of computing time?
    A:


Material from front part of IErl...
-------------------------------------

On Windows, the Erlang shell is not on the path.
You can run it from the Windows menu easliy enough:
    1) Hit the windows key
    2) Type 'Erlang'
    3) Hit return and "C:\Program Files\erl-24.3\bin\werl.exe" should
        execute.

'%' is the Erlang ocmment character
    comments are single-line, ONLY (LYSE uses %% by convention, but one
    '%' is sufficient to make a comment)

The shell does have a basic understanding of the file system, and
supports some basic Unix-like commands issued as functions calls from
with the shell:

    1> ls().
    include lib

    2> pwd().
    c:/Program Files/erl-24.3/usr

    %% to quit:
    3> q().

%% ^G to drop into "User switch command":

User switch command
 --> h
  c [nn]            - connect to job
  i [nn]            - interrupt job
  k [nn]            - kill job
  j                 - list all jobs
  s [shell]         - start local shell
  r [node [shell]]  - start remote shell
  q                 - quit erlang
  ? | h             - this message


The shell is also a basic REPL:

> help().
** shell internal commands **
b()        -- display all variable bindings
e(N)       -- repeat the expression in query <N>
f()        -- forget all variable bindings
f(X)       -- forget the binding of variable X
h()        -- history
% ...
l(Module)  -- load or reload module
%% ... many more lines of commands


> math:pi().
3.141592653589793

10> h(math,tan).

  -spec tan(X) -> float() when X :: number().

Since:
  OTP 18.0,OTP 20.0

  A collection of mathematical functions that return floats. Arguments are
  numbers.

11> math:tan(math:pi() / 2.0).
1.633123935319537e16
12> math:tan(math:pi() / 4.0).
0.9999999999999999

%% ej: Ummmm... hmmm?!? Granted, the result to 11 is a rather large
%% number, but shouldn't that be something like largest representable
%% float? Something approaching infinity? (or IEEE-754-1985 64-bit
%% rep of infinity?) There is a lot room left betweeen 1.633..e16
%% and advertised representable range of exponents up to 308?!?

# Curiously, this is *EXACTLY* what Python gives, too:
>>> math.tan(math.pi / 2.0)
1.633123935319537e+16

%% IE-5, integer results:
13> round(1.9).
2
14> trunc(1.9).
1

%% IE-7, integer constants (up to base 36)
> 2#1111
15
29> 16#badc0ffee.
50159747054
30> 18#gaffe.
1743080

%% IE-8,9
Concept of immutable variables by default. You can make an assignment to
a an unbound variable to begin with, but thereafter, expressions such as
'n = n + 1' are always going to be false (and will throw errors).

%% Remember: to see current bound variables:
> b().


